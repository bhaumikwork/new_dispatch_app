require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe LocationDetailsController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # LocationDetail. As you add validations to LocationDetail, be sure to
  # adjust the attributes here as well.
   before(:each) do
    @dispatcher = Dispatcher.create(email: "test@example.com")
  end
  let(:valid_attributes) {
    {dest_lat: "23.00", dest_long: "72.00", source_lat: "24.00", source_long: "74.00", eta: 20, url_token: "ased3", dispatcher_id: @dispatcher.id}
  }

  let(:invalid_attributes) {
    {dest_lat: "23.00", dest_long: "72.00", source_lat: "24.00", source_long: "74.00", eta: 20, url_token: "ased3", dispatcher_id: @dispatcher.id}
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # LocationDetailsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET #index" do
    it "assigns all location_details as @location_details" do
      location_detail = LocationDetail.create! valid_attributes
      get :index, {}, valid_session
      expect(assigns(:location_details)).to eq([location_detail])
    end
  end

  describe "GET #show" do
    it "assigns the requested location_detail as @location_detail" do
      location_detail = LocationDetail.create! valid_attributes
      get :show, {:id => location_detail.to_param}, valid_session
      expect(assigns(:location_detail)).to eq(location_detail)
    end
  end

  describe "GET #new" do
    it "assigns a new location_detail as @location_detail" do
      get :new, {}, valid_session
      expect(assigns(:location_detail)).to be_a_new(LocationDetail)
    end
  end

  describe "GET #edit" do
    it "assigns the requested location_detail as @location_detail" do
      location_detail = LocationDetail.create! valid_attributes
      get :edit, {:id => location_detail.to_param}, valid_session
      expect(assigns(:location_detail)).to eq(location_detail)
    end
  end

  describe "POST #create" do
    context "with valid params" do
      it "creates a new LocationDetail" do
        expect {
          post :create, {:location_detail => valid_attributes}, valid_session
        }.to change(LocationDetail, :count).by(1)
      end

      it "assigns a newly created location_detail as @location_detail" do
        post :create, {:location_detail => valid_attributes}, valid_session
        expect(assigns(:location_detail)).to be_a(LocationDetail)
        expect(assigns(:location_detail)).to be_persisted
      end

      it "redirects to the created location_detail" do
        post :create, {:location_detail => valid_attributes}, valid_session
        expect(response).to redirect_to(LocationDetail.last)
      end
    end

    # context "with invalid params" do
    #   it "assigns a newly created but unsaved location_detail as @location_detail" do
    #     post :create, {:location_detail => invalid_attributes}, valid_session
    #     expect(assigns(:location_detail)).to be_a_new(LocationDetail)
    #   end

    #   it "re-renders the 'new' template" do
    #     post :create, {:location_detail => invalid_attributes}, valid_session
    #     expect(response).to render_template("new")
    #   end
    # end
  end

  # describe "PUT #update" do
  #   context "with valid params" do
  #     let(:new_attributes) {
  #       {dest_lat: "23.00", dest_long: "72.00", source_lat: "24.00", source_long: "74.00", eta: 20, url_token: "ased3", dispatcher_id: @dispatcher.id}
  #     }

  #     it "updates the requested location_detail" do
  #       location_detail = LocationDetail.create! valid_attributes
  #       put :update, {:id => location_detail.to_param, :location_detail => new_attributes}, valid_session
  #       location_detail.reload
  
  #     end

  #     it "assigns the requested location_detail as @location_detail" do
  #       location_detail = LocationDetail.create! valid_attributes
  #       put :update, {:id => location_detail.to_param, :location_detail => valid_attributes}, valid_session
  #       expect(assigns(:location_detail)).to eq(location_detail)
  #     end

  #     it "redirects to the location_detail" do
  #       location_detail = LocationDetail.create! valid_attributes
  #       put :update, {:id => location_detail.to_param, :location_detail => valid_attributes}, valid_session
  #       expect(response).to redirect_to(location_detail)
  #     end
  #   end

  #   context "with invalid params" do
  #     it "assigns the location_detail as @location_detail" do
  #       location_detail = LocationDetail.create! valid_attributes
  #       put :update, {:id => location_detail.to_param, :location_detail => invalid_attributes}, valid_session
  #       expect(assigns(:location_detail)).to eq(location_detail)
  #     end

  #     it "re-renders the 'edit' template" do
  #       location_detail = LocationDetail.create! valid_attributes
  #       put :update, {:id => location_detail.to_param, :location_detail => invalid_attributes}, valid_session
  #       expect(response).to render_template("edit")
  #     end
  #   end
  # end

  describe "DELETE #destroy" do
    it "destroys the requested location_detail" do
      location_detail = LocationDetail.create! valid_attributes
      expect {
        delete :destroy, {:id => location_detail.to_param}, valid_session
      }.to change(LocationDetail, :count).by(-1)
    end

    it "redirects to the location_details list" do
      location_detail = LocationDetail.create! valid_attributes
      delete :destroy, {:id => location_detail.to_param}, valid_session
      expect(response).to redirect_to(location_details_url)
    end
  end

end
